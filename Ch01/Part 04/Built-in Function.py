#2022.07.28
#내장 함수
#지금까지 파이썬으로 프로그래밍하기 위해 알아야 하는 것들을 대부분 공부헀다.
#이번에는 우리가 만드려는 프로그램이 이미 만들어져 있는지 살펴봐야 한다, 물론 공부를 위해서라면 누군가 만들어 놓은 프로그램을 또 만들 수도 있다.
#하지만 그런 목적이 아니라면 이미 만들어진 것을 다시 만드는 것은 불필요한 행동이다. 그리고 이미 만들어진 프로그램은 테스트 과정을 수 없이 거쳤기 때문에 충분히 검증되어 있다.
#따라서 무엇인가 새로운 프로그램을 만들기 전에는 이미 만들었던 것들, 그 중에서도 특히 파이썬 배포본에 함게 들어 있는 파이썬 라이브러리를 살펴보는 것이 매우 중요하다.

#라이브러리를 살펴보기 전에 파이썬 내장 함수를 먼저 살펴보자. 우리는 이미 몇 가지 내장 함수를 배웠다.
#print,del,type 등이 바로 그것이다. 이러한 내장 함수는 외부 모듈과 달리 import가 필요하지 않기 때문에 아무런 설정 없이 바로 사용할 수 있다.

#abs
#abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다.
print(abs(3))
print(abs(-3))
print(abs(-1.2))

#all
#all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.
print(all([1,2,3]))
#리스트 자로형 [1,2,3]은 모든 요소가 참이므로 True를 돌려준다.

print(all([1,2,3,0]))
#리스트 자료형[1,2,3,0]중에서 요소 0은 거짓이므로 False를 돌려준다.

#any
#any(x)는 x중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.
print(any([1,2,3,0]))
#리스트 자료형[1,2,3,0] 중에서 1,2,3이 참이므로 True를 돌려준다.
print(any([0,""]))
#리스트 자료형(0,"")의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.

#chr
#chr(i)는 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.
print(chr(97))
print(chr(48))

#dir
#dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다. 다음 예는 리스트와 딕셔너리 객체 관련 함수(메소드)를 보여주는 예이다.
print(dir([1,2,3]))
print(dir({'1':'a'}))

#divmod
#divmod(a,b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다.
print(divmod(7,3))
#몫을 구하는 연산자//와 나머지를 구하는 % 연산자를 각각 사용한 결과를 비교해 보자.
print(7 // 3)
print(7 % 3)

#enumerate
#enumerate의 뜻은 '열거하다'라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트,튜플,문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려 준다.
for i, name in enumerate(['body','foo','bar']):
    print(i,name)
#순서 값과 함께 body,foo,bar가 순서대로 출력되었다. 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.
#for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할 때 enumerate 함수를 사용하면 매우 유용하다.

#eval
#eval(expression)은 실행 가능한 문자열 (1+2,'hi'+'a' 같은 것)을 입력으로 받아 문자열을 실행한 결괏값을 돌려주는 함수이다.
print(eval('1+2'))
print(eval("'hi' + 'a'"))
print(eval('divmod(4,3)'))
#보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶을 때 사용한다.

#filter
#filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.
#filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶여서(걸러 내서) 돌려준다.
def positive(l):
    result = [] # 반환 값이 참인 것만 걸러내서 저장할 변수
    for i in l:
        if i > 0:   #i가 0보다 클 때
            result.append(i)    #리스트에 i 추가
    return result
    
print(positive([1,-3,2,0,-5,6]))
#즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.
#filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.
def positive(x):
    return x > 0
print(list(filter(positive,[1,-3,2,0,-5,6])))
#여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을 때 반환 값이 참인 것만 묶어서 돌려준다. 앞의 예에서는 1,2,6만 양수여서 x > 0 문장이 참이 되므로 [1,2,6]이라는 결괏값을 돌려주게 된다.
#앞의 함수는 lambda를 사용함녀 더욱 간편하게 코드를 작성할 수 있다.
print(list(filter(lambda x:x > 0 ,[1,-3,2,0,-5,6])))

#hex
#hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로  변환하여 돌려주는 함수이다.
print(hex(234))
print(hex(3))

#id
#id(object)는 객체를 입력받아 객체의 고유 주소 값(레퍼런스)를 돌려주는 함수이다.
a = 3
print(id(3))
print(id(a))
b = a
print(id(b))
#위 예의 3,a,b는 고유 주소 값이 모두 2219296582000이다. 즉 3,a,b가 모두 같은 객체를 가리키고 있다.
#만약 id(4)라고 입력하면 4는 3,a,b와 다른 객체이므로 당연히 다른 고유 주소 값이 출력된다.
print(id(4))

#input
#input([prompt])은 사용자 입력을 받는 함수이다.
#매개변수로 문자열을 주면 다음 세 번째 예에서 볼 수 있듯이 그 문자열은 프롬프트가 된다.
a = input() #사용자가 입력한 정보를 변수 a에 저장
print(a)
b = input("Enter: ")    #Enter: 프롬프트를 띄우고 사용자 입력을 받음
#위에서 입력받은 문자열을 확인해 보면 다음과 같다.
print(b)

#int
#int(x)는 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는 함수로, 정수를 입력으로 받으면 그대로 돌려준다.
print(int('3')) #문자열 형태 '3'
print(int(3.4)) #소수점이 있는 숫자 3.4
#int(x,radix)는 radix 진수로 표현된 문자열 x를 10진수로 변환하여 돌려준다.

#2진수로 표현된 11의 10진수 값은 다음과 같이 구한다.
print(int('11',2))

#16진수로 표현된 1A의 10진수 값은 다음과 같이 구한다.
print(int('1A',16))

#isinstance
#isinstance(object,class)는 첫 번째 인수로 인스턴스, 두 번쨰 인수로 클래스 이름을 받는다.
#입력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단하여 참이면 True, 거짓이면 False를 돌려준다.
class Person : pass #아무 기능이 없는 Person 클래스 생성
a = Person()    #Person 클래스의 인스턴스 a 생성
print(isinstance(a,Person)) #a가 Person 클래스의 인스턴스인지 확인
#위 예는 a가 Person 클래스가 만든 인스턴스임을 확인시켜 준다.
b = 3
print(isinstance(b,Person))
#b는 Person 클래스가 만든 인스턴스가 아니므로 False를 돌려준다.

