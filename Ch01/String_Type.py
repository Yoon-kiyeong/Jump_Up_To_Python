#문자열 자료형
#문자열(String)이란 문자, 단어 등으로 구성된 문자들의 집합을 의미한다.

print("Life is too short, You need Python")
print("a")
print("123")
print()
#위 문자열 예문을 보면 모두 큰따옴표("")로 둘러싸여 있다. '123은 숫자인데 왜 문자열이지? 라는 의문이 들 수도 있는데, 따옴표로 둘러싸여 있음녀 모두 문자열이라 보면 된다.

#문자열은 어떻게 만들고 사용할까?
#위 예에서는 문자열을 만들 떄 큰따옴표("")만을 사용했지만 이 외에도 문자열을 만드는 방법은 3가지가 더 있다. 파이썬에서 파이썬에서 문자열을 만드는 방법은 총 4가지 이다.

#1. 큰따옴표(")로 양쪽 둘러싸기
print("Hello World")
print()

#2. 작은 따옴표(')로 양쪽 둘러싸기
print('python is fun')
print()

#3. 큰따옴표 3개를 연속(""")으로 써서 양쪽 둘러싸기
print("""Life is too short, You need Python""")
print()

#4. 작은따옴표 3개를 연속(''')으로 써서 양쪽 둘러싸기
print('''Life is too short, You Need python''')
print()

#단순함이 자랑인 파이썬이 문자열을 만드는 방법은 왜 4가지나 있을까? 그 이유에 대해 알아보자

#문자열 안에 작은 따옴표나 큰 따옴표를 포함시키고 싶을 때
#문자열을 만들어 주는 주인공은 작은따옴표(')와 큰따옴표(")이다. 그런데 문자열 안에도 작은따옴표와 큰따옴표가 들어 있어야 할 경우가 있다. 이떄는 좀 더 특별한 기술이 필요하다.

#1. 문자열에 작은따옴표(') 포함시키기
print("Python's favorite food is perl")
print()
#위와 같은 문자열을 food 변수에 저장하고 싶다고 가정하자. 문자열 중 Python's에 작은 따옴표(')가 포함되어 있다.
#이럴 때는 다음과 같이 문자열을 큰따옴표(")로 둘러싸야 한다. 큰따옴표 안에 들어 있는 작은 따옴표는 문자열을 나타내기 위한 기호로 인식되지 않는다.
food = "Python's favorite food is perl"
#food를 입력해서 결과를 확인하자. 변수에 저장된 문자열이 그대로 출력되는 것을 볼 수 있다.
print(food)
print()

#시험 삼아 다음과 같이 큰따옴표가 아닌 작은따옴표로 문자열을 둘러싼 후 다시 실행해보자. 'Python'이 문자열로 인식되어 구문 오류(SyntaxError)가 발생할 것이다.
#food = 'Python's favorite food is perl'
#print(food)

#2. 문자열에 큰따옴표 포함시키기
print("Python is very easy." "he says")
print()
#위와 같이 큰따옴표가 포함된 문자열이라면 어떻게 해야 큰따옴표가 제대로 표현될까?
#다음과 같이 문자열을 작은 따옴표로 둘러싸면 된다.
say = '"Python is very easy." he says.'
print(say)
print()
#이렇게 작은따옴표 안에 사용된 큰따옴표는 ㅁ누자열을 만드는 기호로 인식되지 않는다

#3. 백슬래시(\)를 사용해서 작은따옴표 안에 큰따옴표를 문자열에 포함시키기
food = 'python\'s favorite food is perl'
say = "\"Python is very easy.\" he says."
print(food)
print(say)
print()
#작은따옴표나 큰따옴표를 문자열에 포함시키는 또 다른 방법은 백슬래시를 사용하는 것이다.
#즉 백슬래시를 작은따옴표나 큰따옴표 앞에 삽입하면 백슬래시 뒤의 작은따옴표나 큰따옴표는 문자열을 둘러싸는 기회의 의미가 아니라 문자 ('), (") 그 자체를 뜻하게 된다.

#어떤 방법을 사용해서 문자열 안에 작은따옴표와 큰따옴표를 포함시킬지는 각자의 선택이다.

#여러 줄인 문자열을 변수에 대입하고 싶을 떄
#문자열이 항상 한 줄짜리만 있는 것은 아니다. 다음과 같이 여러 줄의 문자열을 변수에 대입하려면 어떻게 해야 할 까?
#Life is too short
#You need python

#1. 줄을 바꾸는 이스케이프 코드 '\n' 삽입하기
multiline = "Life is too short\nYou need Python"
print(multiline)
#위 예처럼 줄바꿈 문자'\n'을 삽입하는 방법이 있지만 읽기에 불편하고 줄이 길어지는 단점이 있다.

#2. 연속된 작은따옴표 3개(''') 또는 큰따옴표 3개(""") 사용하기
#위 1번의 단점을 극복하기 위해 파이썬에서는 다음과 같이 작은 따옴표 3개 또는 큰따옴표 3개를 사용한다
multiline = '''
Life is too Short 
You need Python
'''
print(multiline)

multiline = """
Life is too short
You need Python
"""
print(multiline)
#두 경우 모두 결과는 동일하다. 위 예에서도 확인할 수 있듯이 문자열이 여러 줄인 경우 이스케이프 코드를 쓰는 것보다 따옴표를 연속해서 쓰는 거시 훨씬 깔끔하다.

#문자열 연산하기
#파이썬에서는 문자열을 더하거나 곱할 수 있다. 다른 언어에서는 쉽게 찾아볼 수 없는 재미있는 기능으로, 우리 생각을 그대로 반영해 주는 파이썬만의 장점이라고 할 수 있다.
#문자열을 더하거나 곱하는 방법에 대해 알아보자.

#1. 문자열 더해서 연결하기 (Concatenation)
head= "Python"
tail = "is fun!"
print(head + tail)
print()
#위 소스 코드에서 세번쨰 줄을 보자. "Python"이라는 head 변수와 "is fun!" 이라는 tail 변수를 더한 것이다. 결과는 'Python is fun!'이다. 즉 head와 tail 변수가 +에 의해 합쳐지는 것이다.

#2. 문자열 곱하기
a = 'python'
print(a*2)
print()
#위 소스코드에서 *의 의미는 우리가 일반적으로 사용하는 숫자 곱하기의 의미와는 다르다.
#위 소스코드에서 a * 2 문장은 a를 두 번 반복하라는 뜻이다. 즉 *는 문자열의 반복을 뜻하는 의미로 사용되었다. 굳이 코드의 의미를 설명할 필요가 없을 정도로 직관적이다

#3. 문자열 곱하기 응용
#문자열 곱하기를 좀 더 응용해 보자.
print("=" * 50)
print("My Program")
print("=" * 50)
print()

#4. 문자열 길이 구하기
#문자열의 길이는 다음과 같이 len 함수를 사용하면 구할 수 있다. len 함수는 print 함수처럼 파이썬의 기본 내장 함수로 별 다른 설정 없이 바로 사용할 수 있다.
a = "Life is Too short"
print(len(a))
print()

#나 혼자 코딩
#'You need python' 문장를 문자열로 만들고 길이를 구해 보자
a = 'You need python'
print(a)
print(len(a))
print()

#2022.05.28
#문자열 인덱싱과 슬라이싱
#인덱싱(Indexing)이란 무엇인가를 '가리킨다'는 의미이고, 슬라이싱(Slicing)은 무엇인가를 '잘라낸다'는 의미이다. 이런 의미를 잘 생각해보자

#문자열 인덱싱이란?
a = "Life is too Short, You need Python"

#이 소스 코드에서 변수 a에 저장한 문자열의 각 문자마다 번호를 매겨 보면 다음과 같다
#L i f e   i s   t o  o    s  h  o  r  t  ,     Y   o   u    n   e  e  d     P  y  t  h  o  n
#0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  20 21 22 23 24 25 26 27 28 29 30 31 32 33
#"Life is too short, You need Python" 문자열에서 L은 첫 번째 자리를 뜻하는 숫자 0, 바로 다음인 i는 1 이런 식으로 계속 번호를 붙인 것이다. 중간에 있는 short의 s는 12가 된다.

#이제 다음 예를 실행해 보자
a = "Life is too short, You need Python"
print(a[3])
#a[3]이 뜻하는 것은 a라는 문자열의 네 번째 숫자 e를 말한다. 파이썬은 0부터 숫자를 센다.
#따라서 파이썬은 위 문자열을 다음과 같이 바라보고 있다
#a[0]: 'L', a[1]: 'i', a[2]: 'f', a[3]: 'e', a[4]: ' ', ...
#a[번호]는 문자열 안의 특정한 값을 뽑아내는 역할을 한다. 이러한 작업을 인덱싱 이라고 한다.

#문자열 인덱싱 활용하기
#인덱싱의 예를 좀 더 살펴보자
a=  "Life is too short, You need python"
print(a[0])
print(a[12])
print(a[-1])

#앞의 a[0]과 a[12]는 쉽게 이해 할 수 있지만 마지막의 a[-1]은 도대체 무엇일까? 이것은 문자열을 뒤에서부터 읽기 위해서 마이너스(-) 기호를 붙이는 것이다.
#즉 a[-1]은 뒤에서부터 세어 첫 번째가 되는 문자를 말한다. a의 값은 "Life is too short, You need Python"문자열이므로 뒤에서부터 첫 번째 문자는 가장 마지막 문자 'n'이다.

#뒤에서부터 첫 번째 문자를 표시할 때에도 0부터 세어 'a[-0]'이라고 해야 하지 않을까? 라고 생각할 수도 있지만, 0과 -0은 같은 것이기 때문에 a[-0],과 a[0]은 똑같은 값을 보여준다
print(a[-0])

print(a[-2])
print(a[-5])
print()

#문자열 슬라이싱이란?
#그렇다면 "Life is too short, You need Python"문자열에서 단순히 한 문자만을 뽑아내는 것이 아니라 'Life', 'You' 같은 단어를 뽑아낼 수는 없을까?
#다음과 같이 하면 된다

a = "Life is too short, You need Python"
b = a[0] + a[1] + a[2] + a[3]
print(b)
print()
#위 방법처럼 단순하게 접근할 수 있지만 파이썬에서는 더 좋은 방법을 제공한다. 바로 슬라이싱 기법이다. 위 예는 슬라이싱 기법으로 다음과 같이 간단하게 처리할 수 있다.
a = "Life is too short, You need Python"
print(a[0:4])

#a[0:4]가 뜻하는 것은 a 문자열, 즉 "Life is too short, You need Python" 문장에서 자리 번호 0부터 4까지의 문자를 뽑아낸다는 뜻이다.
#하지만 다음과 같은 의문이 생길 것이다. a[0]은 L, a[1]은 i, a[2]는 f, a[3]는 e니까 a[0:3]으로도 Life라는 단어를 뽑아낼 수 있지 않을까? 바로 확인해 보자
print(a[0:3])
print()

#이렇게 되는 이유는 간단하다. 슬라이싱 기법으로 a[시작번호:끝번호]를 지정할 때 끝 번호에 해당하는 것은 포함하지 않기 때문이다. a[0:3]을 수식으로 나타내면 다음과 같다
#0 <= a < 3
#이 수식을 만족하는 것은 a[0], a[1], a[2]이다. 따라서 a[0:3]은 'Lif'이고 a[0:4]는 'Life'가 되는 것이다.
#이 부분에서 문자열 연산에서 가장 혼동하기 쉬운 부분이다.

#문자열을 슬라이싱 하는 방법
print(a[0:5])

#위 예는 a[0] + a[1] + a[2] + a[3] + a[4] 와 동일하다. a[4]는 공백 문자이기 때문에 'Life'가 아닌 'Life '가 출력된다. 공백 문자 역시 L,i,f,e 같은 문자와 동일하게 취급되는 것을 잊지 말아야 한다

print()

#슬라이싱할 때 항상 시작 번호가 0일 필요는 없다.
print(a[0:2])
print(a[5:7])
print(a[12:17])

print()

#a[시작 번호:끝 번호]에서 끝 번호 부분을 생략하면 시작 번호부터 그 문자열의 끝까지 뽑아낸다
print(a[19:])

print()

#a[시작 번호:끝 번호]에서 시작 번호를 생략하면 문자열의 처음부터 끝 번호까지 뽑아낸다
print(a[:17])

print()

#a[시작 번호:끝 번호]에서 시작 번호와 끝 번호를 생략하면 문자열의 처음부터 끝까지를 뽑아낸다.
print(a[:])

print()

#슬라이싱에서도 인덱싱과 마찬가지로 마이너스(-) 기호를 사용할 수 있다.
print(a[19:-7])

#위 소스 코드에서 a[19:-7]이 뜻하는 것은 a[19]에서부터 a[-8]까지를 말한다. 이 역시 a[-7]은 포함하지 않는다
print()

#슬라이싱으로 문자열 나누기
#다음은 자주 사용하게 되는 슬라이싱 기법 중 하나이다.
a = "20010331Rainy"
date = a[:8]
weather = a[8:]
print(date)
print(weather)
print()
#위 예는 문자열 a를 두 부분으로 나누는 기법이다. 숫자 8을 기준으로 문자열 a를 양쪽으로 한 번씩 슬라이싱했다. a[:8]은 a[8]이 포함되지 않고, a[8:]은 a[8]을 포함하기 때문에 8을 기준으로 해서 두 부분으로 나눌수 있는 것이다.
#위 예에서는 "20010331Rainy"문자열을 날짜를 나타내는 부분인 "20010331"과 날씨를 나타내는 부분인 'Rainy'로 나누는 방법을 보여 준다.
#위 문자열 "20010331Rainy"를 연도 2001, 월과 일을 나타내는 0331, 날씨를 나타내는 Rainy의 세 부분으로 나누려면 다음과 같이 할 수 있다.
a = "20010331Rainy"
year = a[:4] #처음부터 a[3]까지
day = a[4:8] #a[4]부터 a[7]까지
weather = a[8:] # a[8]부터 마지막까지
print(year)
print(day)
print(weather)

#위 예는 숫자 4와 8로 "20010331Rainy" 문자열을 세 부분으로 나누는 방법을 보여준다.
print()
#Pithon이라는 문자열을 Python으로 바꾸려면?
#a = "Pithon" 
#print(a[1])
#a[1] = 'y'
#a 변수에 "Pithon" 문자열을 대입하고 a[1]의 값이 i니까 a[1]을 y로 바꾸어 준다는 생각이다. 하지만 결과는 당연히 오류가 발생한다. 왜냐하면 문자열의 요솟값은 바꿀 수 있는 값이 아니기 때문이다.
#문자열 자료형은 그 요솟값을 변경할 수 없다. 그래서 immutable한 자료형 이라고 부른다.
#하지만 슬라이싱 기법을 사용하면 Pithon 문자열을 사용해 Python 문자열을 만들 수 있다.
a = 'Pithon'
print(a[:1])
print(a[2:])
print(a[:1] + 'y' + a[2:])
#위 예에서 볼 수 있듯이 슬라이싱을 사용하면 "Pithon" 문자열을 'P'부분과 'thon' 부분으로 나눌 수 있기 때문에 그 사이에 'y' 문자를 추가하여 'Python'이라는 새로운 문자열을 만들 수 있다.

#문자열 포매팅
#문자열에서 또 하나 알아야 할 것으로는 문자열 포매팅(Formatting)이 있다.
#문자열 안의 특정한 값을 바꿔야 할 경우가 있을 때 이것을 가능하게 해주는 것이 바로 문자열 포매팅 기법이다.
#쉽게 말해 문자열 포매팅이란 문자열 안에 어떤 값을 삽입하는 방법이다. 다음 예를 직접 실행해 보면서 그 사용법을 알아보자.
print()
#문자열 포매팅 따라하기
#1. 숫자 바로 대입
print("I eat %d apples." %3)
#위 예제의 결괏값을 보면 알겠지만 위 예제는 문자열 안에 정수 3을 삽입하는 방법을 보여 준다. 문자열 안에서 숫자를 넣고 싶은 자리에 %d 문자를 넣어 주고, 삽입할 숫자 3은 가장 뒤에 있는 % 문자 다음에 써 넣었다.
#여기서 %d는 문자열 포맷 코드라고 부른다
print()
#2. 문자열 바로 대입
#문자열 안에 꼭 숫잠나 넣으라는 법은 없다. 이번에는 숫자 대신 문자열을 넣어 보자.
print("I eat %s apples" % "five")
#위 예제에서는 문자열 안에 또 다른 문자열을 삽입하기 위해 앞에서 사용한 문자열 포맷 코드 %d가 아닌 %s를 썼다. 숫자를 넣기 위해서는 %d를 써야 하고, 문자열을 넣기 위해서는 %s를 써야 한다.
print()
#3. 숫자 값을 나타내는 변수로 대입
number  = 3
print("I eat %d apples" % number)
#1번처럼 숫자를 바로 대입하나 위 예제처럼 숫자 값을 나타내는 변수를 대입하나 결과는 같다.
print()
#4. 2개 이상의 값을 넣기
#그렇다면 문자열 안에 1개가 아닌 여러 개의 값을 넣고 싶을 땐 어떻게 해야 할까?
number = 10
day = "three"
print("I ate %d apples. so I was sick for %s days" %(number, day))
#위 예문처럼 2개 이상의 값을 넣으려면 마지막 % 다음 괄호 안에 콤마(,)로 구분하여 각각의 값을 넣어주면 된다.
print()
#문자열 포맷 코드
#문자열 포매팅 예제에서는 대입해 넣는 자료형으로 정수와 문자열을 사용했으나 이 외에도 다양한 것을 대입할 수 있다.
# %s : 문자열(String)
# %c : 문자 1게(Character)
# %d : 정수(Integer)
# %f : 부동 소수(Floating-point)
# %o : 8진수
# %x : 16진수
# % % : Literal % (문자 '%' 자체)
#여기에서 재밌는 것은 %s 포맷 코드인데, 이 코드는 어떤 형태의 값이든 변환해 넣을 수 있다
print("I have %s apple" %3)
print("rate is %s" % 3.234)
#3을 문자열 안에 삽입하려면 %d를 사용하고, 3.234를 삽입하려면 %f를 사용해야 한다. 하지만, %s를 사용하면 이런 것을 생각하지 않아도 된다. 왜냐하면 %s는 자동으로 % 뒤에 있는 값을 문자열로 바꾸기 때문이다.
print()
#포맷 코드와 숫자 함께 사용하기
#위에서 보았듯이 %d, %s 등의 포맷 코드는 문자열 안에 어떤 값을 삽입하기 위해 사용한다.
#하지만 포맷 코드를 숫자와 함께 사용하면 더 유용하게 상요할 수 있다.
#1. 정렬과 공백
print("%10s" % "hi")
#앞의 예문에서 %10s는 전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬하고 그 앞의 나머지는 공백으로 남겨 두라는 의미이다.
#그렇다면 반대쪽인 왼쪽 정렬은 %-10s가 될 것이다.
print("%-10sjane" % 'hi')
#hi를 왼쪽으로 정렬하고 나머지는 공백으로 채웠음을 볼 수 있다.
#2. 소수점 표현하기
print("%0.4f"% 3.42134234)
#3.42134234를 소수점 네 번째 자리까지만 나타내고 싶은 경우에는 위와 같이 사용한다. 즉 여기서 '.'의 의미는 소수점 포인틀르 말하고 그 뒤의 숫자 4는 소수점 뒤에 나올 숫자의 개수를 말한다.
print("%10.4f" %3.42134234)
#위 예는 숫자 3.42134234를 소수점 네 번째 자리까지만 표시하고 전체 길이가 10개인 문자열 공간에서 오른쪽으로 정렬하는 예를 보여준다.
print()

#2022.05.31
#format 함수를 사용한 포매팅
#문자열의 format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다.
print("I eat {0} apples." .format(3))
#I eat {0} apples 문자열 중 {0} 부분이 숫자 3으로 바뀌었다.
print()
#문자열 바로 대입하기
print("I eat {0} apples." .format("Five"))
#문자열의 {0} 항목이 five라는 문자열로 바뀌었다.
print()
#숫자 값을 가진 변수로 대입하기
number = 3
print("I eat {0} apples.".format(number))
print()
#2개 이상의 값 넣기
number = 10
day = "three"
print("i ate {0} apples. so I was sick for {1} days." .format(number,day))
#2개 이상의 값을 넣을 경우 문자열의 {0}, {1}과 같은 인덱스 항목이 format 함수의 입력값으로 순서에 맞게 바뀐다. 즉 위 예에서 {0}은 format 함수의 첫 번째 입력값인 number로 바뀌고 {1}은 format 함수의 두 번째 입력값인 day로 바뀐다.
print()

#이름으로 넣기
print("I ate {number} apples. so I was sick for {day} days.".format(number = 10, day = 3) )
#위 예에서도 볼 수 있듯이 {0}, {1}과 같은 인덱스 항목 대신 더 편리한 {name} 형태를 사요하는 방법도 있다. {name} 형태를 사용할 경우 format 함수에는 반드시  name = value 와 같은 형태의 입력값이 있어야만 한다.
#위 예에는 문자열의 {number}, {day}가 format 함수의 입력값인 number = 10, day = 3 값으로 각각 바뀌는 것을 보여주고 있다.
print()

#인덱스와 이름을 혼용해서 넣기
print("I ate {0} apples. so I was sick for {day}." .format(10, day=3))
#위와 같이 인덱스 항목과 name = value 형태를 혼용하는 것도 가능하다.
print()

#왼쪽 정렬
print("{0:<10}" .format("hi"))
#:<10 표현식을 사용하면 치환하는 문자열을 왼쪽으로 정렬하고 문자열의 총 자릿수를 10으로 맞출 수 있다.
print()

#오른쪽 정렬
print("{0:>10}" .format("hi"))
#오른쪽 정렬은 :< 대신 :>을 사용하면 된다. 화살표 방향을 생각하면 어느 쪽으로 정렬되는지 바로 알 수 있을 것이다.
print()

#가운데 정렬
print("{0:^10}".format("hi"))
#:^ 기호를 사용하면 가운데 정렬도 가능하다.
print()

#공백 채우기
print("{0:=^10}".format("hi"))
print("{0:!<10}".format("hi"))
#정렬할 때 공백 문자 대신에 지정한 문자 값으로 채워 넣는 것도 가능하다. 채워 넣을 문자 값은 정렬 문자 <, >, ^ 바로 앞에 넣어야 한다.
print()

#소수점 표현하기
y = 3.42134234
print("{0:0.4f}" .format(y))
#위 예는 format 함수를 사용해 소수점을 4자리까지만 표현하는 방법을 보여 준다.
print("{0:10.4f}".format(y))
#위와 같이 자릿수를 10으로 맞출 수도 있다.
print()
#{ 또는 } 문자 표현하기
print("{{ and }}" .format())
#format 함수를 사용해 문자열 포매팅을 할 경우 {} 와 같은 중괄호(brace)문자를 포매팅 문자가 아닌 문자 그대로 사용하고 싶은 경우에는 위 예의 {{}}처럼 2개를 연속해서 사용하면 된다.
print()

#f 문자열 포매팅
#파이썬 3.6 버전부터는 f 문자열 푸매팅 기능을 사용할 수 있다. 파이썬 3.6 미만 버전에서는 사용할 수 없는 기능이다.
#문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능을 사용할 수 있다.
name = "홍길동"
age = 30
print(f'나의 이름은 {name}입니다. 나이는 {age}입니다.')

#f 문자열 포매팅은 위와 같이 name, age와 같은 변수 값을 생성한 후에 그 값을 참조할 수 있다. 또한 f 문자열 포매팅은 표현식을 지원하기 때문에 다음과 같은 것도 가능하다.
age = 30
print(f"나는 내년이면 {age+1}살이 된다.")

#딕셔너리는 f 문자열 포매팅에서 다음과 같이 사용할 수 있다.
d = {'name': '홍길동', 'age':30}
print(f'나의 이름은 {d["name"]}입니다. 나이는 {d["age"]}입니다.')

#정렬은 다음과 같이 할 수 있다.
print(f'{"hi":<10}') #왼쪽 정렬
print(f'{"hi":>10}') #오른쪽 정렬
print(f'{"hi":^10}') #가운데 정렬

#공백 채우기는 다음과 같이 할 수 있다.
print(f'{"hi":=^10}') #가운데 정렬하고 = 문자로 공백 채우기
print(f'{"hi":!<10}') #왼쪽 정렬하고 ! 문자로 공백 채우기

#소수점은 다음과 같이 표현 할 수 있다.
y = 3.42134234
print(f'{y:0.4f}') #소수점 4자리까지만 표현
print(f'{y:10.4f}') #소수점 4자리까지만 표현하고 총 자릿수를 10으로 맞춤

#f 문자열에서 {} 문자를 표시하려면 다음과 같이 두 개를 동시에 사용해야 한다.
print(f'{{ and }}')
print()

#나 혼자 코딩
#format 함수 또는 f 문자열 포매팅을 사용해 '!!!python!!!' 문자열을 출력해 보자.
print(f'{"python":!^12}')
print("{0:!^12}".format('python'))
print()

#문자열 관련 함수
#문자열 자료형은 자체적으로 함수를 갖고 있다. 이들 함수를 다른 말로 문자열 냊아 함수라고 한다.
#이 내장 함수를 사용하려면 문자열 변수 이름 뒤에 '.'를 붙인 다음에 함수 이름을 써주면 된다.

#문자 개수 세기 (count)
a = "hobby"
print(a.count('b'))
#문자열 중 문자 b의 개수를 돌려준다

#위치 알려주기 1(find)
a = "Python is the best choice"
print(a.find('b')) #문자열에서 b가 처음 나온 위치
print(a.find('k'))
#문자열 중 문자 b가 처음으로 나온 위치를 반환한다.
#만약 찾는 문자나 문자열이 존재하지 않는다면 -1을 반환한다.

#위치 알려주기 2(index)
a = "Life is too short"
print(a.index('t'))
#print(a.index('k')) #k가 없기 때문에 오류 발생
#문자열 중 문자 t가 맨 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 오류를 발생시킨다. 앞의 find 함수와 다른 점은 문자열 안에 존재하지 않는 문자를 찾으면 오류가 발생한다는 점

#문자열 삽입(join)
print(",".join('abcd'))
#abcd 문자열의 각각의 문자 사이에 ","를 삽입한다.
#join 함수는 문자열 뿐만 아니라 앞으로 배울 리스트나 튜플도 입력으로 사용할 수 있다.
#join 함수의 입력으로 리스트를 사용하는 예
print(",".join(['a','b','c','d']))

#소문자를 대문자로 바꾸기(upper)
a = "hi"
print(a.upper())
#upper함수는 소문자를 대문자로 바꾸어 준다. 만약 문자열이 이미 대문자라면 아무 변화도 일어나지 않을 것이다.

#대문자를 소문자로 바꾸기(lower)
a = "HI"
print(a.lower())
#lower함수는 대문자를 소문자로 바꾸어 준다.

#왼쪽 공백 지우기(lstrip)
a = " hi "
print(a.lstrip())
#문자열 중 가장 왼쪽에 있는 한 칸 이상의 연속된 공백들을 모두 지운다. lstrip에서 l은 left를 의미한다.

#오른쪽 공백 지우기(rstrip)
a = " hi "
print(a.rstrip())
#문자열 중 가장 오른쪽에 있는 한 칸 이상의 연속된 공백들을 모두 지운다. rstrip에서 r은 right를 의미한다.

#양쪽 공백 지우기(strip)
a = " hi "
print(a.strip())
#문자열 양쪽에 있는 한 칸 이상의 연속된 공백을 모두 지운다.

#문자열 바꾸기 (replace)
a = "Life is too short"
print(a.replace("Life", "Your leg"))
#replace(바뀌게 될 문자열, 바꿀 문자열)처럼 사용해서 문자열 안의 특정한 값을 다른 값으로 치환해준다.

#문자열 나누기(split)
a = "Life is too short"
print(a.split()) #공백을 기준으로 문자열 나눔
b = "a:b:c:d"
print(b.split(':')) #:기호를 기준으로 문자열 나눔

#split 함수는 a.split()처럼 괄호 안에 아무 값도 넣어 주지 않으면 공백(스페이스, 탭, 엔터 등)을 기준으로 문자열을 나누어 준다. 
# 만약 b.split(':')처럼 골호 안에 특정 값이 있을 경우에는 괄호 안의 값을 구분자로 해서 문자열을 나누어 준다. 
# 이렇게 나눈 값은 리스트에 하나씩 들어가게 된다. ['Life', 'is', 'too', 'short']나 ['a', 'b', 'c', 'd']가 리스트이다